{"ast":null,"code":"import \"antd/es/spin/style/css\";\nimport _Spin from \"antd/es/spin\";\nvar _jsxFileName = \"/home/creator-76/bc/web/bcopp-blog/react-antd/src/components/BlogMain.tsx\";\nimport React from 'react';\nimport { createGlobalState } from 'react-hooks-global-state';\nimport useGetHandler from '../hooks/FlaskAPI';\nimport ProjectSummary from './ProjectSummary';\nimport queryString from 'query-string';\nconst initialState = {\n  entries: null,\n  lastSearch: ''\n};\nconst {\n  useGlobalState\n} = createGlobalState(initialState);\nconst articlesRequest = {\n  method: 'get',\n  url: 'articles/'\n};\n//const projectEntries = [\n//{title:\"hello1\", published:\"1/1/1\", summary:\"this is my summary\", resource:\"www.test\"} as EntryTrunc,\n//{title:\"hello2\", published:\"1/1/1\", summary:\"this is my summary\", resource:\"www.test\"} as EntryTrunc,\n//{title:\"hello3\", published:\"1/1/1\", summary:\"this is my summary\", resource:\"www.test\"} as EntryTrunc,\n//]\n//<ProjectSummary entries={projectEntries}/>\nexport const BlogMain = props => {\n  const [entries, setEntries] = useGlobalState('entries');\n  const [lastSearch, setLastSearch] = useGlobalState('lastSearch');\n  const {\n    data,\n    isLoading,\n    hasError,\n    handleRequest\n  } = useGetHandler(); //console.log(JSON.stringify(props))\n\n  let paramsSearch = props.location.search;\n  const params = paramsSearch.length !== 0 ? queryString.parse(paramsSearch.substr(1)) : {};\n  console.log(params);\n\n  if (hasError) {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 44,\n        columnNumber: 12\n      }\n    }, \"Error\");\n  }\n\n  if (data !== entries) {\n    console.log(\"SET\");\n    setEntries(data);\n  }\n\n  if (isLoading) {\n    return /*#__PURE__*/React.createElement(_Spin, {\n      size: \"large\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 13\n      }\n    });\n  } else {\n    // Display without search query\n    if (!('q' in params)) {\n      if (lastSearch === \"\" && entries !== null) {\n        return /*#__PURE__*/React.createElement(ProjectSummary, {\n          entries: entries,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 59,\n            columnNumber: 16\n          }\n        });\n      } else {\n        handleRequest(articlesRequest);\n      }\n    } // Display using search query\n    else if (params.q === lastSearch) {\n        return /*#__PURE__*/React.createElement(\"div\", {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 67,\n            columnNumber: 14\n          }\n        }, \"Entries search=\", params);\n      } else {\n        handleRequest(articlesRequest);\n      }\n  }\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 11\n    }\n  });\n}; //{props.entries.map(e => <Project entry={e} />)}\n\nexport default BlogMain;","map":{"version":3,"sources":["/home/creator-76/bc/web/bcopp-blog/react-antd/src/components/BlogMain.tsx"],"names":["React","createGlobalState","useGetHandler","ProjectSummary","queryString","initialState","entries","lastSearch","useGlobalState","articlesRequest","method","url","BlogMain","props","setEntries","setLastSearch","data","isLoading","hasError","handleRequest","paramsSearch","location","search","params","length","parse","substr","console","log","q"],"mappings":";;;AAAA,OAAOA,KAAP,MAAgC,OAAhC;AAIA,SAASC,iBAAT,QAAkC,0BAAlC;AACA,OAAOC,aAAP,MAA0B,mBAA1B;AACA,OAAOC,cAAP,MAA2B,kBAA3B;AACA,OAAOC,WAAP,MAAwB,cAAxB;AAGA,MAAMC,YAAY,GAAG;AAAEC,EAAAA,OAAO,EAAE,IAAX;AAAiBC,EAAAA,UAAU,EAAE;AAA7B,CAArB;AACA,MAAM;AAAEC,EAAAA;AAAF,IAAqBP,iBAAiB,CAACI,YAAD,CAA5C;AAEA,MAAMI,eAAe,GAAG;AACtBC,EAAAA,MAAM,EAAE,KADc;AAEtBC,EAAAA,GAAG,EAAE;AAFiB,CAAxB;AASA;AACE;AACA;AACA;AACF;AACkB;AAElB,OAAO,MAAMC,QAA+C,GAAIC,KAAD,IAAgB;AAC7E,QAAM,CAACP,OAAD,EAAUQ,UAAV,IAAwBN,cAAc,CAAC,SAAD,CAA5C;AACA,QAAM,CAACD,UAAD,EAAaQ,aAAb,IAA8BP,cAAc,CAAC,YAAD,CAAlD;AACA,QAAM;AAAEQ,IAAAA,IAAF;AAAQC,IAAAA,SAAR;AAAmBC,IAAAA,QAAnB;AAA6BC,IAAAA;AAA7B,MAA+CjB,aAAa,EAAlE,CAH6E,CAK7E;;AACA,MAAIkB,YAAY,GAAGP,KAAK,CAACQ,QAAN,CAAeC,MAAlC;AACA,QAAMC,MAAM,GAAIH,YAAY,CAACI,MAAb,KAAwB,CAAzB,GACbpB,WAAW,CAACqB,KAAZ,CAAkBL,YAAY,CAACM,MAAb,CAAoB,CAApB,CAAlB,CADa,GAGb,EAHF;AAIAC,EAAAA,OAAO,CAACC,GAAR,CAAYL,MAAZ;;AAEA,MAAIL,QAAJ,EAAc;AACZ,wBAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eAAP;AACD;;AAED,MAAIF,IAAI,KAAKV,OAAb,EAAsB;AACpBqB,IAAAA,OAAO,CAACC,GAAR,CAAY,KAAZ;AACAd,IAAAA,UAAU,CAACE,IAAD,CAAV;AACD;;AAED,MAAIC,SAAJ,EAAe;AACb,wBAAQ;AAAM,MAAA,IAAI,EAAC,OAAX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAAR;AACD,GAFD,MAGK;AACH;AACA,QAAI,EAAE,OAAOM,MAAT,CAAJ,EAAsB;AACpB,UAAIhB,UAAU,KAAK,EAAf,IAAqBD,OAAO,KAAK,IAArC,EAA2C;AACzC,4BAAO,oBAAC,cAAD;AAAgB,UAAA,OAAO,EAAEA,OAAzB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UAAP;AACD,OAFD,MAGK;AACHa,QAAAA,aAAa,CAACV,eAAD,CAAb;AACD;AACF,KAPD,CAQA;AARA,SASK,IAAIc,MAAM,CAACM,CAAP,KAAatB,UAAjB,EAA6B;AAChC,4BAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,8BAAqBgB,MAArB,CAAP;AACD,OAFI,MAGA;AACHJ,QAAAA,aAAa,CAACV,eAAD,CAAb;AACD;AACF;;AAED,sBAAQ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAAR;AACD,CA7CM,C,CA+CP;;AAEA,eAAeG,QAAf","sourcesContent":["import React, { useState } from 'react';\nimport styled from 'styled-components';\nimport EntryTrunc from '../data/Entry'\nimport { useParams, RouteComponentProps } from 'react-router-dom';\nimport { createGlobalState } from 'react-hooks-global-state';\nimport useGetHandler from '../hooks/FlaskAPI'\nimport ProjectSummary from './ProjectSummary'\nimport queryString from 'query-string'\nimport {Spin, Space} from 'antd'\n\nconst initialState = { entries: null, lastSearch: '' }\nconst { useGlobalState } = createGlobalState(initialState)\n\nconst articlesRequest = {\n  method: 'get',\n  url: 'articles/',\n};\n\ninterface rquery {\n  id?: string\n}\n\n//const projectEntries = [\n  //{title:\"hello1\", published:\"1/1/1\", summary:\"this is my summary\", resource:\"www.test\"} as EntryTrunc,\n  //{title:\"hello2\", published:\"1/1/1\", summary:\"this is my summary\", resource:\"www.test\"} as EntryTrunc,\n  //{title:\"hello3\", published:\"1/1/1\", summary:\"this is my summary\", resource:\"www.test\"} as EntryTrunc,\n//]\n                  //<ProjectSummary entries={projectEntries}/>\n\nexport const BlogMain: React.FC<RouteComponentProps<rquery>> = (props: any) => {\n  const [entries, setEntries] = useGlobalState('entries');\n  const [lastSearch, setLastSearch] = useGlobalState('lastSearch');\n  const { data, isLoading, hasError, handleRequest } = useGetHandler();\n\n  //console.log(JSON.stringify(props))\n  let paramsSearch = props.location.search\n  const params = (paramsSearch.length !== 0) ?\n    queryString.parse(paramsSearch.substr(1))\n  :\n    {}\n  console.log(params)\n\n  if (hasError) {\n    return <div>Error</div>\n  }\n\n  if (data !== entries) {\n    console.log(\"SET\")\n    setEntries(data)\n  }\n\n  if (isLoading) {\n    return (<Spin size='large'/>)\n  }\n  else {\n    // Display without search query\n    if (!('q' in params)) {\n      if (lastSearch === \"\" && entries !== null) {\n        return <ProjectSummary entries={entries as unknown as EntryTrunc[]}/>\n      }\n      else {\n        handleRequest(articlesRequest)\n      }\n    }\n    // Display using search query\n    else if (params.q === lastSearch) {\n      return <div>Entries search={params}</div>\n    }\n    else {\n      handleRequest(articlesRequest)\n    }\n  }\n\n  return (<div></div>)\n};\n\n//{props.entries.map(e => <Project entry={e} />)}\n\nexport default BlogMain;"]},"metadata":{},"sourceType":"module"}