{"ast":null,"code":"import \"antd/es/layout/style/css\";\nimport _Layout from \"antd/es/layout\";\nimport \"antd/es/spin/style/css\";\nimport _Spin from \"antd/es/spin\";\nimport \"antd/es/message/style/css\";\nimport _message from \"antd/es/message\";\nvar _jsxFileName = \"/home/creator-76/bc/web/bcopp-blog/react-antd/src/components/BlogMain.tsx\";\nimport React from 'react';\nimport styled from 'styled-components';\nimport { createGlobalState } from 'react-hooks-global-state';\nimport useGetHandler from '../hooks/FlaskAPI';\nimport queryString from 'query-string';\nconst initialState = {\n  entries: null,\n  lastSearch: ''\n};\nconst {\n  useGlobalState\n} = createGlobalState(initialState);\nconst articlesRequest = {\n  method: 'get',\n  url: 'articles/'\n};\n//const projectEntries = [\n//{title:\"hello1\", published:\"1/1/1\", summary:\"this is my summary\", resource:\"www.test\"} as EntryTrunc,\n//{title:\"hello2\", published:\"1/1/1\", summary:\"this is my summary\", resource:\"www.test\"} as EntryTrunc,\n//{title:\"hello3\", published:\"1/1/1\", summary:\"this is my summary\", resource:\"www.test\"} as EntryTrunc,\n//]\n//<ProjectSummary entries={projectEntries}/>\nexport const BlogMain = props => {\n  const [entries, setEntries] = useGlobalState('entries');\n  const [lastSearch, setLastSearch] = useGlobalState('lastSearch');\n  const {\n    data,\n    isLoading,\n    hasError,\n    handleRequest\n  } = useGetHandler(); //console.log(JSON.stringify(props))\n\n  let paramsSearch = props.location.search;\n  const params = paramsSearch.length !== 0 ? queryString.parse(paramsSearch.substr(1)) : {};\n  console.log(params);\n\n  if (hasError) {\n    _message.error(\"An error has occured, please reload the page\");\n\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 12\n      }\n    }, \"Error\");\n  }\n\n  if (data !== entries) {\n    console.log(\"SET\");\n    setEntries(data);\n  }\n\n  if (isLoading) {\n    return /*#__PURE__*/React.createElement(_Spin, {\n      size: \"large\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 13\n      }\n    });\n  } else {\n    // Display without search query\n    if (!('q' in params)) {\n      if (lastSearch === \"\" && entries !== null) {\n        return /*#__PURE__*/React.createElement(EntryList, {\n          entries: entries,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 63,\n            columnNumber: 11\n          }\n        });\n      } else {\n        handleRequest(articlesRequest);\n      }\n    } // Display using search query\n    else if (params.q === lastSearch) {\n        return /*#__PURE__*/React.createElement(\"div\", {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 72,\n            columnNumber: 14\n          }\n        }, \"Entries search=\", params);\n      } else {\n        handleRequest(articlesRequest);\n      }\n  }\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 11\n    }\n  });\n};\nconst CenterFlex = styled.div`\n  display: flex;\n  justify-content: center;\n  align-items: center;\n`;\n\nconst EntryList = props => {\n  return /*#__PURE__*/React.createElement(\"div\", {\n    style: {\n      margin: \"10px\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(CenterFlex, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 7\n    }\n  }, props.entries.map(e => /*#__PURE__*/React.createElement(\"ul\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 37\n    }\n  }, /*#__PURE__*/React.createElement(Entry, {\n    entry: e,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 41\n    }\n  })))));\n};\n\nconst {\n  Header,\n  Footer,\n  Sider,\n  Content\n} = _Layout;\nconst Thumbnail = styled.img`\n  height: auto;\n  width: auto;\n  border-radius: 50%;\n  background-size: cover;\n\n`;\n\nconst Entry = props => {\n  return /*#__PURE__*/React.createElement(\"div\", {\n    style: {\n      width: \"80vw\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 117,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(_Layout, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 118,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(Sider, {\n    style: {\n      background: \"white\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 119,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Thumbnail, {\n    src: \"github.png\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 120,\n      columnNumber: 11\n    }\n  })), /*#__PURE__*/React.createElement(_Layout, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 122,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Header, {\n    style: {\n      background: \"#f0f2f5\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 123,\n      columnNumber: 11\n    }\n  }, props.entry.title), /*#__PURE__*/React.createElement(Content, {\n    style: {\n      background: \"#f0f2f5\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 124,\n      columnNumber: 11\n    }\n  }, props.entry.summary))));\n}; //{props.entries.map(e => <Project entry={e} />)}\n\n\nexport default BlogMain;","map":{"version":3,"sources":["/home/creator-76/bc/web/bcopp-blog/react-antd/src/components/BlogMain.tsx"],"names":["React","styled","createGlobalState","useGetHandler","queryString","initialState","entries","lastSearch","useGlobalState","articlesRequest","method","url","BlogMain","props","setEntries","setLastSearch","data","isLoading","hasError","handleRequest","paramsSearch","location","search","params","length","parse","substr","console","log","error","q","CenterFlex","div","EntryList","margin","map","e","Header","Footer","Sider","Content","Thumbnail","img","Entry","width","background","entry","title","summary"],"mappings":"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","sourcesContent":["import React, { useState } from 'react';\nimport styled from 'styled-components';\nimport EntryTrunc from '../data/Entry'\nimport { useParams, RouteComponentProps } from 'react-router-dom';\nimport { createGlobalState } from 'react-hooks-global-state';\nimport useGetHandler from '../hooks/FlaskAPI'\nimport ProjectSummary from './ProjectSummary'\nimport queryString from 'query-string'\nimport {Spin, message, Space, Layout} from 'antd'\n\n\nconst initialState = { entries: null, lastSearch: '' }\nconst { useGlobalState } = createGlobalState(initialState)\n\nconst articlesRequest = {\n  method: 'get',\n  url: 'articles/',\n};\n\ninterface rquery {\n  id?: string\n}\n\n//const projectEntries = [\n  //{title:\"hello1\", published:\"1/1/1\", summary:\"this is my summary\", resource:\"www.test\"} as EntryTrunc,\n  //{title:\"hello2\", published:\"1/1/1\", summary:\"this is my summary\", resource:\"www.test\"} as EntryTrunc,\n  //{title:\"hello3\", published:\"1/1/1\", summary:\"this is my summary\", resource:\"www.test\"} as EntryTrunc,\n//]\n                  //<ProjectSummary entries={projectEntries}/>\n\nexport const BlogMain: React.FC<RouteComponentProps<rquery>> = (props: any) => {\n\n  const [entries, setEntries] = useGlobalState('entries');\n  const [lastSearch, setLastSearch] = useGlobalState('lastSearch');\n  const { data, isLoading, hasError, handleRequest } = useGetHandler();\n\n  //console.log(JSON.stringify(props))\n  let paramsSearch = props.location.search\n  const params = (paramsSearch.length !== 0) ?\n    queryString.parse(paramsSearch.substr(1))\n  :\n    {}\n  console.log(params)\n\n  if (hasError) {\n    message.error(\"An error has occured, please reload the page\")\n    return <div>Error</div>\n  }\n\n  if (data !== entries) {\n    console.log(\"SET\")\n    setEntries(data)\n  }\n\n  if (isLoading) {\n    return (<Spin size='large'/>)\n  }\n  else {\n    // Display without search query\n    if (!('q' in params)) {\n      if (lastSearch === \"\" && entries !== null) {\n        return (\n          <EntryList entries={entries as unknown as EntryTrunc[]}/>\n        );\n      }\n      else {\n        handleRequest(articlesRequest)\n      }\n    }\n    // Display using search query\n    else if (params.q === lastSearch) {\n      return <div>Entries search={params}</div>\n    }\n    else {\n      handleRequest(articlesRequest)\n    }\n  }\n\n  return (<div></div>)\n};\n\n\nconst CenterFlex = styled.div `\n  display: flex;\n  justify-content: center;\n  align-items: center;\n`\nconst EntryList: React.FC<{\n  entries: EntryTrunc[]\n}> = (props) => {\n\n  return (\n    <div style={{margin:\"10px\"}}>\n      <CenterFlex>\n          {props.entries.map((e) => <ul><Entry entry={e}/></ul>)}\n      </CenterFlex>\n    </div>\n  )\n}\n\n\nconst {Header, Footer, Sider, Content} = Layout;\n\nconst Thumbnail = styled.img `\n  height: auto;\n  width: auto;\n  border-radius: 50%;\n  background-size: cover;\n\n`\n\nconst Entry: React.FC<{\n  entry: EntryTrunc\n}> = (props) => {\n\n  return (\n    <div style={{width:\"80vw\"}}>\n      <Layout>\n        <Sider style={{background:\"white\"}}>\n          <Thumbnail src=\"github.png\"/>\n        </Sider>\n        <Layout>\n          <Header style={{background:\"#f0f2f5\"}}>{props.entry.title}</Header>\n          <Content style={{background:\"#f0f2f5\"}}>{props.entry.summary}</Content>\n        </Layout>\n      </Layout>\n    </div>\n  );\n}\n\n//{props.entries.map(e => <Project entry={e} />)}\n\nexport default BlogMain;"]},"metadata":{},"sourceType":"module"}